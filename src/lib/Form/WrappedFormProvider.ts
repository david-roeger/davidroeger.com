/* WrapperFormProvider.svelte generated by Svelte v4.2.2 */
import {
	SvelteComponent,
	assign,
	component_subscribe,
	create_component,
	destroy_component,
	get_spread_object,
	get_spread_update,
	init,
	mount_component,
	safe_not_equal,
	transition_in,
	transition_out
} from 'svelte/internal';

import 'svelte/internal/disclose-version';
import FormProvider from '$routes/blank/FormProvider.svelte';

function create_fragment(ctx) {
	let formprovider;
	let current;
	const formprovider_spread_levels = [{ form: 'a' }, /*$restProps*/ ctx[0]];
	let formprovider_props = {};

	for (let i = 0; i < formprovider_spread_levels.length; i += 1) {
		formprovider_props = assign(
			formprovider_props,
			formprovider_spread_levels[i]
		);
	}

	formprovider = new FormProvider({ props: formprovider_props });

	return {
		c() {
			create_component(formprovider.$$.fragment);
		},
		m(target, anchor) {
			mount_component(formprovider, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const formprovider_changes =
				dirty & /*$restProps*/ 1
					? get_spread_update(formprovider_spread_levels, [
							formprovider_spread_levels[0],
							get_spread_object(/*$restProps*/ ctx[0])
					  ])
					: {};

			formprovider.$set(formprovider_changes);
		},
		i(local) {
			if (current) return;
			transition_in(formprovider.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(formprovider.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(formprovider, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $restProps;
	component_subscribe($$self, restProps, ($$value) =>
		$$invalidate(0, ($restProps = $$value))
	);
	let { t } = $$props;

	$$self.$$set = ($$props) => {
		if ('t' in $$props) $$invalidate(1, (t = $$props.t));
	};

	return [$restProps, t];
}

class WrapperFormProvider extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {
			t: 1
		});
	}
}

export default WrapperFormProvider;
