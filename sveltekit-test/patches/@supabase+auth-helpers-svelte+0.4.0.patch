diff --git a/node_modules/@supabase/auth-helpers-svelte/dist/SupaAuthHelper.svelte b/node_modules/@supabase/auth-helpers-svelte/dist/SupaAuthHelper.svelte
index a74da3e..9c3880d 100644
--- a/node_modules/@supabase/auth-helpers-svelte/dist/SupaAuthHelper.svelte
+++ b/node_modules/@supabase/auth-helpers-svelte/dist/SupaAuthHelper.svelte
@@ -1,58 +1,74 @@
-<script>import { onMount } from 'svelte';
-import { checkSession } from './helpers';
-import { setIsLoading, setError, user } from './store';
-// Props
-export let supabaseClient;
-export let callbackUrl = '/api/auth/callback';
-export let profileUrl = '/api/auth/user';
-export let autoRefreshToken = true;
-export let session;
-export let onUserUpdate = (user) => { };
-const handleVisibilityChange = async () => {
-    if (document?.visibilityState === 'visible') {
-        setIsLoading(true);
-        await checkSession({ profileUrl, autoRefreshToken, supabaseClient });
-        setIsLoading(false);
-    }
-};
-onMount(() => {
-    handleVisibilityChange();
-    user.subscribe((value) => {
-        $session = { user: value };
-        onUserUpdate(value);
-    });
-    if (autoRefreshToken)
-        window?.addEventListener('visibilitychange', handleVisibilityChange);
-    const { data: authListener } = supabaseClient.auth.onAuthStateChange(async (event, session) => {
-        if (event === 'TOKEN_REFRESHED')
-            return;
-        setIsLoading(true);
-        // Forward session from client to server where it is set in a Cookie.
-        // NOTE: this will eventually be removed when the Cookie can be set differently.
-        await fetch(callbackUrl, {
-            method: 'POST',
-            headers: new Headers({ 'Content-Type': 'application/json' }),
-            credentials: 'same-origin',
-            body: JSON.stringify({ event, session })
-        }).then((res) => {
-            if (!res.ok) {
-                const err = new Error(`The request to ${callbackUrl} failed`);
-                setError(err);
-            }
-        });
-        // Fetch the user from the API route
-        await checkSession({
-            profileUrl,
-            autoRefreshToken,
-            supabaseClient
-        });
-        setIsLoading(false);
-    });
-    return () => {
-        window?.removeEventListener('visibilitychange', handleVisibilityChange);
-        authListener?.unsubscribe();
-    };
-});
+<script>
+	import { onMount } from 'svelte';
+	import { checkSession } from './helpers';
+	import { setIsLoading, setError, user } from './store';
+	// Props
+	export let supabaseClient;
+	export let callbackUrl = '/api/auth/callback';
+	export let profileUrl = '/api/auth/user';
+	export let autoRefreshToken = true;
+	export let session;
+	export let onUserUpdate = (user) => {};
+	const handleVisibilityChange = async () => {
+		if (document?.visibilityState === 'visible') {
+			setIsLoading(true);
+			await checkSession({
+				profileUrl,
+				autoRefreshToken,
+				supabaseClient,
+			});
+			setIsLoading(false);
+		}
+	};
+	onMount(() => {
+		handleVisibilityChange();
+		user.subscribe((value) => {
+			$session.user = value;
+			onUserUpdate(value);
+		});
+		if (autoRefreshToken)
+			window?.addEventListener(
+				'visibilitychange',
+				handleVisibilityChange,
+			);
+		const { data: authListener } = supabaseClient.auth.onAuthStateChange(
+			async (event, session) => {
+				if (event === 'TOKEN_REFRESHED') return;
+				setIsLoading(true);
+				// Forward session from client to server where it is set in a Cookie.
+				// NOTE: this will eventually be removed when the Cookie can be set differently.
+				await fetch(callbackUrl, {
+					method: 'POST',
+					headers: new Headers({
+						'Content-Type': 'application/json',
+					}),
+					credentials: 'same-origin',
+					body: JSON.stringify({ event, session }),
+				}).then((res) => {
+					if (!res.ok) {
+						const err = new Error(
+							`The request to ${callbackUrl} failed`,
+						);
+						setError(err);
+					}
+				});
+				// Fetch the user from the API route
+				await checkSession({
+					profileUrl,
+					autoRefreshToken,
+					supabaseClient,
+				});
+				setIsLoading(false);
+			},
+		);
+		return () => {
+			window?.removeEventListener(
+				'visibilitychange',
+				handleVisibilityChange,
+			);
+			authListener?.unsubscribe();
+		};
+	});
 </script>
 
 <slot />
